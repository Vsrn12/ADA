#!/usr/bin/env python3
"""
Aplicaci√≥n Principal - An√°lisis de Red Social
Integra el c√≥digo existente con una interfaz gr√°fica moderna
"""

import sys
import os
import logging
import platform
import subprocess

# Importaciones corregidas para ejecuci√≥n directa desde 'python_app'
from gui_app import SocialNetworkApp as run_gui_class # Importa la clase directamente
from loader import load_location_data, load_user_data
from eda import run_location_eda, run_user_eda
import utils # Importa utils directamente

# Importar configuraci√≥n
from config import LOCATION_FILE, USER_FILE, SAMPLE_SIZE

def setup_logging():
    """Configurar sistema de logging"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('social_network_analysis.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )

def check_data_files():
    """Verificar que los archivos de datos existan"""
    
    missing_files = []
    # Aseg√∫rate de que los archivos est√©n en el mismo directorio que main.py
    # o ajusta la ruta si est√°n en otro lugar (ej. un directorio 'data' en la ra√≠z del proyecto)
    
    # Comprobar 10_million_location.txt
    location_path = os.path.join(os.path.dirname(__file__), '..', LOCATION_FILE)
    if not os.path.exists(location_path):
        missing_files.append(LOCATION_FILE)
    
    # Comprobar 10_million_user.txt
    user_path = os.path.join(os.path.dirname(__file__), '..', USER_FILE)
    if not os.path.exists(user_path):
        missing_files.append(USER_FILE)
    
    if missing_files:
        print("‚ö†Ô∏è  ARCHIVOS FALTANTES:")
        for file in missing_files:
            print(f"   ‚Ä¢ {file}")
        print("\nPor favor, aseg√∫rate de tener los archivos de datos en el directorio 'project' (uno arriba de 'python_app').")
        print("Los archivos deben llamarse:")
        print(f"   ‚Ä¢ {LOCATION_FILE}")
        print(f"   ‚Ä¢ {USER_FILE}")
        return False
    
    return True

def run_eda_analysis():
    """Ejecuta el an√°lisis EDA."""
    logging.info("Iniciando an√°lisis EDA...")
    print("Iniciando an√°lisis EDA. Esto puede tomar un tiempo...")

    location_path = os.path.join(os.path.dirname(__file__), '..', LOCATION_FILE)
    user_path = os.path.join(os.path.dirname(__file__), '..', USER_FILE)

    location_df = load_location_data(location_path)
    user_df = load_user_data(user_path)

    if location_df is not None:
        run_location_eda(location_df)
    else:
        logging.error("No se pudieron cargar los datos de ubicaci√≥n para el EDA.")
    
    if user_df is not None:
        run_user_eda(user_df)
    else:
        logging.error("No se pudieron cargar los datos de usuario para el EDA.")

    logging.info("An√°lisis EDA completado. Revisa los archivos de imagen generados (lat_hist.png, long_hist.png, degree_dist.png).")
    print("An√°lisis EDA completado. Revisa los archivos de imagen generados.")

    # Abrir la carpeta de trabajo donde se guardan las im√°genes
    current_dir = os.path.dirname(os.path.abspath(__file__))
    if platform.system() == "Windows":
        os.startfile(current_dir)
    elif platform.system() == "Darwin": # macOS
        subprocess.call(["open", current_dir])
    else: # Linux
        subprocess.call(["xdg-open", current_dir])

def run_gui():
    """Inicia la interfaz gr√°fica de usuario."""
    root = tk.Tk()
    # Pasa las rutas de los archivos directamente a la clase SocialNetworkApp
    # Asumiendo que los archivos est√°n en el directorio 'project'
    location_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', LOCATION_FILE))
    user_file_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', USER_FILE))
    
    app = run_gui_class(root, location_file_path, user_file_path, SAMPLE_SIZE)
    root.mainloop()

if __name__ == "__main__":
    setup_logging()
    logging.info("Aplicaci√≥n principal iniciada.")

    if not check_data_files():
        logging.error("Archivos de datos de entrada no encontrados. Por favor, corr√≠gelos antes de continuar.")
        # Pausar la ejecuci√≥n para que el usuario vea el mensaje
        input("\nPresiona Enter para continuar de todos modos (la aplicaci√≥n podr√≠a fallar sin los datos)...")
    
    print("üöÄ Iniciando aplicaci√≥n de an√°lisis de red social...")
    print()
    print("Funcionalidades disponibles:")
    print("   ‚Ä¢ üìÅ Carga de datos de 10 millones de usuarios")
    print("   ‚Ä¢ üó∫Ô∏è  Visualizaci√≥n en mapa mundial")
    print("   ‚Ä¢ üë• Detecci√≥n de comunidades (algoritmo Louvain)")
    print("   ‚Ä¢ üõ£Ô∏è  An√°lisis de caminos m√°s cortos")
    print("   ‚Ä¢ üìä Estad√≠sticas detalladas de la red")
    print("   ‚Ä¢ üé® Visualizaciones interactivas")
    print()
    
    try:
        # Preguntar si ejecutar EDA primero
        response = input("¬øDeseas ejecutar el an√°lisis EDA original primero? (s/N): ").lower()
        if response in ['s', 'si', 's√≠', 'y', 'yes']:\
            run_eda_analysis()
        print()
        
        print("üñ•Ô∏è  Iniciando interfaz gr√°fica...")
        print("   ‚Ä¢ Usa los botones para cargar datos y realizar an√°lisis")
        print("   ‚Ä¢ El mapa mostrar√° los nodos distribuidos globalmente")
        print("   ‚Ä¢ Puedes detectar comunidades y calcular caminos")
        print()
        
        # Iniciar aplicaci√≥n GUI
        import tkinter as tk # Importa tkinter aqu√≠ para evitar problemas si EDA se ejecuta primero
        run_gui() # Llama a la funci√≥n que inicia la GUI
        
    except KeyboardInterrupt:
        print("\n\nüëã Aplicaci√≥n cerrada por el usuario.")
    except Exception as e:
        logging.error(f"Error cr√≠tico: {e}")
        print(f"\n‚ùå Error cr√≠tico: {e}")
        print("Revisa el archivo de log para m√°s detalles.")
    
    print("\nüîö Aplicaci√≥n finalizada.")